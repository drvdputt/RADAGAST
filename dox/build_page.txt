/*! @page build_page Build instructions

@section build_download Getting the code
Download a zip of the source code, or clone the git repository.

@code{.sh}
coming soon
@endcode

@section build_deps Dependencies

- CMake

- C++14 compatible compiler (tested with GCC and Clang)

- <a href="https://www.gnu.org/software/gsl/">Gnu Scientific Library</a>. Sometimes you will
  need to install an additional package containing the headers, e.g. gsl-dev or gsl-devel.

- <a href="http://eigen.tuxfamily.org/">Eigen3</a>. This is a header-only library. Download the
  latest release, and put it at your preferred location. Sometimes, Eigen is also available
  through the package manager.

@section build_cmake Configure, build, and install

Configuring the build is relatively straightforward, analogous to most projects that use CMake.
First, make a separate build directory (in-source builds are not supported). We suggest that you
put the build directory and the repository under a common parent directory.

@code{.sh}
$ mkdir build
$ ls
build  git
@endcode

Then run CMake from this directory with the repository (which contains CMakeLists.txt at the top
level) as the main argument, and several options

@code{.sh}
$ cd build
$ cmake ../git -DCMAKE_RELEASE_TYPE=Release -DEIGEN_DIR=/path/to/include/eigen3 (optional) -DCMAKE_INSTALL_PREFIX="$(PWD)" (optional)
@endcode

The 'Release' build type enables the default optimization options, and makes sure that the code
does not write any output to the terminal. By default, CMake will look for the eigen headers in
a couple of locations. This should be fine if Eigen was obtained through a package manager. If
this fails, provide the path to the eigen3 directory by setting the EIGEN_DIR variable as shown.

The install prefix can be chosen freely. It determines where the headers and library files will
be installed after the build. By default, this is /usr/local/lib and /usr/local/include, but you
might want to change it to somewhere under your home directory, so you don't need admin
permissions.

Once configured, you can inspect some of the build variables using `$ cmake -L ../git`. To start
the build, run `$ make -j <number of jobs>` from the build directory. If you want to use the gas
module in another code, you can run `cmake install` to copy some of the files to the classic
lib/ and include/ directories, at the location you specified during configuration.

@note The script `build.sh` provides some reasonable defaults for these steps. It builds and
installs to `../cmake_release`.

@section build_link Include and link in another C++ program

@subsection build_link_manual Manually specify compiler flags

To use the gas module in your code, you can make use of the classes and functions in
GasInterface.hpp, GrainInterface.hpp, and GasState.hpp. When compiling, use the include flag @c
-I\<CMAKE_INSTALL_PREFIX\>/include, where @c \<CMAKE_INSTALL_PREFIX\> is the install directory
you specified at configuration. For the linking step, add the linker path and library names
using the flags @c -L\<CMAKE_INSTALL_PREFIX\>/lib and @c -lgasmodule.

Additionally, your binary will also need to be linked to GSL using @c -lgsl and @c -lgslcblas.

@subsection build_link_cmake Using CMake

If your own program is also built using CMake, then you can take inspiration from the following
snippet

@code
  set(GASMODULE_INSTALL_DIR "/your/install/dir")     
  find_library(GASMODULE_LIBRARIES
    NAMES libgasmodule.a
    PATHS "${GASMODULE_INSTALL_DIR}/lib")
  find_path(GASMODULE_INCLUDE_PATH
    NAMES "GasInterface.hpp"
    PATHS "${GASMODULE_INSTALL_DIR}/include")
  include_directories(${GASMODULE_INCLUDE_PATH})    
  target_link_libraries(${TARGET} ${GASMODULE_LIBRARIES})

  find_package(GSL REQUIRED)
  target_link_libraries(${TARGET} GSL::gsl GSL::gslcblas)
@endcode

*/
