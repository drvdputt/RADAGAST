from pathlib import Path
import itertools
import argparse
import glob

# customizable
densities = [1.0e2, 1.0e3, 1.0e4, 1.0e5]
color_temperatures = [7.5e3, 1.5e4, 3.0e4]
luminosities = [1.0, 10.0, 100.0, 1.0e3, 1.0e4]

# depends on location of this repo
gasmodule_git = (Path(__file__).parent / "../..").resolve()

template_dir = gasmodule_git / "benchmark/cloudy"
available_templates = [
    str(Path(s).name).replace("_template", "")
    for s in glob.glob(str(template_dir) + "/*_template")
]

gasmodule_envvar = "H2MAXJ=99 H2XMAXV=99 H2EMINV=0 H2EMAXV=99"


def main():
    """Generate a set of benchmarks for comparing cloudy and the gas module.
    One benchmark is generated for each combination of density, color
    temperature and bolometric luminosity (see top of this file). The
    input file for cloudy is generated by taking one of the templates in
    this repo, and filling in the blanks. For running the gas module
    (the 'main' executable), a list of commands is generated, with the
    right number in the command line arguments.

    The commands to run the whole set of benchmarks (both cloudy and
    main) are written to joblist.txt.

    The input (and output after running) for each cloudy benchmark is
    written to a subdirectory of git/../benchmark_output, named using
    the three benchmark parameters. The output of 'main' is in a
    separate subdirectory 'MRNDust'.

    """
    ap = argparse.ArgumentParser()
    ap.add_argument(
        "--cloudy-path",
        default=str(Path.home() / "Software/c17.01/"),
        help="default: %(default)s",
    )
    ap.add_argument(
        "template",
        type=str,
        choices=available_templates,
        help="one of the templates located in " + str(template_dir),
    )
    args = ap.parse_args()

    # load cloudy input file template as one big string, and fill in the
    # values in curly brackest by treating it as a format string
    template_name = args.template
    cloudy_template = gasmodule_git / "benchmark/cloudy/{}_template".format(
        template_name
    )
    if not cloudy_template.is_file():
        raise "{} doesn't exist".format(cloudy_template)

    cloudy_input_fname = cloudy_template.name.replace("_template", ".in")

    cloudy_dir = Path(args.cloudy_path)
    cloudy_exe = cloudy_dir / "source/cloudy.exe"
    if not Path(cloudy_exe).is_file():
        raise cloudy_exe + " doesn't exist"

    gasmodule_main = (gasmodule_git / "../cmake_release/src/mains/main").resolve()
    if not gasmodule_main.is_file():
        raise gasmodule_main + " doesn't exist"

    output_dir = (gasmodule_git / "../benchmark_output").resolve()
    output_dir.mkdir(exist_ok=True)
    joblist_file = output_dir / "joblist.txt"
    gasmod_jobs_file = output_dir / "only_gasmod.txt"
    cloudy_jobs_file = output_dir / "only_cloudy.txt"

    with open(cloudy_template) as f:
        cloudy_template_string = f.read()

    with open(joblist_file, "w") as all_jobf, open(
        gasmod_jobs_file, "w"
    ) as gasmod_jobf, open(cloudy_jobs_file, "w") as cloudy_jobf:
        for nh, tc, lum in itertools.product(
            densities, color_temperatures, luminosities
        ):
            output_subdir = output_dir / "{:.1e}_{:.1e}_{:.1e}".format(nh, tc, lum)
            output_subdir.mkdir(exist_ok=True)

            # save parameters to file for convenience
            with open(output_subdir / "parameters.dat", "w") as f:
                f.writelines((str(d) + "\n" for d in (nh, tc, lum)))

            #
            with open(output_subdir / cloudy_input_fname, "w") as f:
                f.write(cloudy_template_string.format(nh=nh, tc=tc, lum=lum))

            cloudy_job = "cd {wdir} && {cloudy} -r {name}\n".format(
                wdir=output_subdir.resolve(), cloudy=cloudy_exe, name=template_name
            )
            gasmodule_job = "cd {wdir} && mkdir -p MRNDust && {env} {gasmodule} {nh} {tc} {lum}\n".format(
                env=gasmodule_envvar,
                wdir=output_subdir.resolve(),
                gasmodule=gasmodule_main,
                nh=nh,
                tc=tc,
                lum=lum,
            )
            cloudy_jobf.write(cloudy_job)
            gasmod_jobf.write(gasmodule_job)
            all_jobf.write(cloudy_job)
            all_jobf.write(gasmodule_job)

    run_jobs_command = "CLOUDY_DATA={}/data parallel < {}".format(
        cloudy_dir, joblist_file
    )
    print("To run the benchmarks, use the following command")
    print(run_jobs_command)


main()
