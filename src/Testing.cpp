#include "Testing.h"
#include "Constants.h"
#include "IonizationBalance.h"
#include "NumUtils.h"
#include "PhotoelectricHeating.h"
#include "TemplatedUtils.h"
#include "TwoLevel.h"

#include "GasInterface.h"
#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>

using namespace std;

vector<double> Testing::generateGeometricGridv(size_t nPoints, double min, double max)
{
	vector<double> frequencyv(nPoints);
	double freqStepFactor = std::pow(max / min, 1. / (nPoints - 1));
	double freq = min;
	for (size_t n = 0; n < nPoints; n++)
	{
		frequencyv[n] = freq;
		freq *= freqStepFactor;
	}
	return frequencyv;
}

vector<double> Testing::freqToWavGrid(const vector<double>& frequencyv)
{
	vector<double> wavelengthv;
	wavelengthv.reserve(frequencyv.size());
	for (auto rit = frequencyv.rbegin(); rit != frequencyv.rend(); rit++)
		wavelengthv.push_back(Constant::LIGHT / *rit);
	return wavelengthv;
}

void Testing::refineFrequencyGrid(vector<double>& grid, size_t nPerLine, double spacingPower,
                                  Array lineFreqv, Array freqWidthv)
{
	// We want an odd nPerLine, so we can put 1 point in the center
	if (!(nPerLine % 2))
		nPerLine += 1;

	grid.reserve(grid.size() + nPerLine * lineFreqv.size());

	for (size_t i = 0; i < lineFreqv.size(); i++)
	{
		// Add a point at the center of the line, while keeping the vector sorted
		TemplatedUtils::sortedInsert<double, vector<double>>(lineFreqv[i], grid);

		// Add the rest of the points in a power law spaced way
		if (nPerLine > 1)
		{
			size_t nOneSide = (nPerLine - 1) / 2;
			double a = freqWidthv[i] / pow(nOneSide, spacingPower);
			for (size_t sidePoint = 1; sidePoint <= nOneSide; sidePoint++)
			{
				double distance = a * pow(sidePoint, spacingPower);

				// Left of center
				double freq = lineFreqv[i] - distance;
				TemplatedUtils::sortedInsert<double>(freq, grid);

				// Right of center
				freq = lineFreqv[i] + distance;
				TemplatedUtils::sortedInsert<double>(freq, grid);
			}
		}
	}
}

Array Testing::generateSpecificIntensityv(const vector<double>& frequencyv, double Tc, double G0)
{
	// A blackbody (in specific intensity per wavelength units)
	vector<double> wavelengthv = freqToWavGrid(frequencyv);
	vector<double> I_lambda = NumUtils::bbodyCGS<double>(wavelengthv, Tc);

	// Convert to per frequency units using I_nu = I_lambda * lambda * lambda / c
	Array I_nu(frequencyv.size());
	for (size_t iWav = 0; iWav < wavelengthv.size(); iWav++)
		I_nu[frequencyv.size() - iWav - 1] = I_lambda[iWav] * wavelengthv[iWav] *
		                                     wavelengthv[iWav] / Constant::LIGHT;

	// Cut out the UV part
	size_t i = 0;
	size_t startLambdaUV, endLambdaUV;
	while (wavelengthv[i] < 912 * Constant::ANG_CM && i < I_lambda.size())
		i++;
	startLambdaUV = i > 0 ? i - 1 : 0;
	while (wavelengthv[i] < 2400 * Constant::ANG_CM && i < I_lambda.size())
		i++;
	endLambdaUV = i + 1;
	cout << "UV goes from " << startLambdaUV << " to " << endLambdaUV << endl;
	vector<double> wavelengthUV(wavelengthv.begin() + startLambdaUV,
	                            wavelengthv.begin() + endLambdaUV);
	vector<double> isrfUV(I_lambda.begin() + startLambdaUV, I_lambda.begin() + endLambdaUV);

	// Integrate over the UV only
	double UVdensity = Constant::FPI / Constant::LIGHT *
	                   NumUtils::integrate<double>(wavelengthUV, isrfUV);
	double currentG0 = UVdensity / Constant::HABING;

	// Rescale to _G0
	I_nu *= G0 / currentG0;

	vector<double> frequencyUV(end(frequencyv) - endLambdaUV - 1,
	                           end(frequencyv) - startLambdaUV - 1);
	vector<double> isrfUVbis(end(I_nu) - endLambdaUV - 1, end(I_nu) - startLambdaUV - 1);

	// Integrate over the UV only
	double UVdensitybis = Constant::FPI / Constant::LIGHT *
	                      NumUtils::integrate<double>(frequencyUV, isrfUVbis);
	cout << "Normalized spectrum uv = " << UVdensitybis << " ("
	     << UVdensitybis / Constant::HABING << " habing)" << endl;

	// Write out the ISRF
	std::ofstream out;
	out.open("isrf.txt");
	for (size_t b = 0; b < I_nu.size(); b++)
		out << frequencyv[b] << '\t' << I_nu[b] << '\n';
	out.close();
	out.open("isrfUV.txt");
	for (size_t b = 0; b < isrfUV.size(); b++)
		out << frequencyUV[b] << '\t' << isrfUVbis[b] << '\n';
	out.close();
	return I_nu;
}

Array Testing::freqToWavSpecificIntensity(const vector<double>& frequencyv,
                                          const Array& specificIntensity_nu)
{
	Array I_lambda(frequencyv.size());
	for (size_t iFreq = 0; iFreq < frequencyv.size(); iFreq++)
	{
		I_lambda[I_lambda.size() - iFreq - 1] = specificIntensity_nu[iFreq] *
		                                        frequencyv[iFreq] * frequencyv[iFreq] /
		                                        Constant::LIGHT;
	}
	return I_lambda;
}

void Testing::testIonizationCrossSection()
{
	ofstream out;
	out.open("ionizationCrosSection.dat");
	for (double freq = 0; freq < 6.e16; freq += 1e14)
	{
		double sigma = Ionization::crossSection(freq);
		out << freq << "\t" << sigma << endl;
	}
	out.close();
}

void Testing::testGasInterfaceImpl()
{
	double Tc = 40000;
	double G0 = 1e0;
	double n = 1e1;
	double expectedTemperature = 1000;

	vector<double> tempFrequencyv =
	                generateGeometricGridv(100, Constant::LIGHT / (1e7 * Constant::UM_CM),
	                                       Constant::LIGHT / (0.01 * Constant::UM_CM));

	//	const double lineWindowFactor = 5;
	//	vector<double> lineFreqv = {Constant::LIGHT * 82258.9191133};
	//	vector<double> decayRatev = {6.2649e+08};
	//	double thermalFactor =
	//	                sqrt(Constant::BOLTZMAN * 500000 / Constant::HMASS_CGS) /
	// Constant::LIGHT; 	vector<double> lineWidthv;
	//	lineWidthv.reserve(lineFreqv.size());
	//	for (size_t l = 0; l < lineFreqv.size(); l++)
	//	{
	//		double freq = lineFreqv[l];
	//		cout << "thermal width " << freq * thermalFactor << " natural width "
	//		     << decayRatev[l] << endl;
	//		lineWidthv.push_back(lineWindowFactor * (freq * thermalFactor +
	// decayRatev[l]));
	//	}
	//	refineFrequencyGrid(tempFrequencyv, 101, 3., lineFreqv, lineWidthv);

	Array frequencyv(tempFrequencyv.data(), tempFrequencyv.size());
	GasInterface gi(frequencyv, true);
	frequencyv = gi.frequencyv();

//#define PROBLEMATIC_ISRF
#ifdef PROBLEMATIC_ISRF
	Array rwavelengthv =
	                Array({1.000000000e+07, 8.111308308e+06, 6.579332247e+06, 5.336699231e+06,
	                       4.328761281e+06, 3.511191734e+06, 2.848035868e+06, 2.310129700e+06,
	                       1.873817423e+06, 1.519911083e+06, 1.232846739e+06, 1.000000000e+06,
	                       8.111308308e+05, 6.579332247e+05, 5.336699231e+05, 4.328761281e+05,
	                       3.511191734e+05, 2.848035868e+05, 2.310129700e+05, 1.873817423e+05,
	                       1.519911083e+05, 1.232846739e+05, 1.000000000e+05, 8.111308308e+04,
	                       6.579332247e+04, 5.336699231e+04, 4.328761281e+04, 3.511191734e+04,
	                       2.848035868e+04, 2.310129700e+04, 1.873817423e+04, 1.519911083e+04,
	                       1.232846739e+04, 1.000000000e+04, 8.111308308e+03, 6.579332247e+03,
	                       5.336699231e+03, 4.328761281e+03, 3.511191734e+03, 2.848035868e+03,
	                       2.310129700e+03, 1.873817423e+03, 1.519911083e+03, 1.232846739e+03,
	                       1.000000000e+03, 8.111308308e+02, 6.579332247e+02, 5.336699231e+02,
	                       4.328761281e+02, 3.511191734e+02, 2.848035868e+02, 2.310129700e+02,
	                       1.873817423e+02, 1.519911083e+02, 1.232846739e+02, 1.000000000e+02,
	                       8.111308308e+01, 6.579332247e+01, 5.336699231e+01, 4.328761281e+01,
	                       3.647041350e+01, 3.647037703e+01, 3.647034056e+01, 3.511191734e+01,
	                       3.291475335e+01, 3.291472044e+01, 3.291468752e+01, 3.291451558e+01,
	                       3.291448267e+01, 3.291444975e+01, 2.954125602e+01, 2.954122648e+01,
	                       2.954119694e+01, 2.954106449e+01, 2.954103495e+01, 2.954100541e+01,
	                       2.848035868e+01, 2.635009548e+01, 2.635006913e+01, 2.635004278e+01,
	                       2.634994309e+01, 2.634991674e+01, 2.634989039e+01, 2.334124773e+01,
	                       2.334122439e+01, 2.334120105e+01, 2.334112816e+01, 2.334110482e+01,
	                       2.334108148e+01, 2.310129700e+01, 2.051472049e+01, 2.051469997e+01,
	                       2.051467946e+01, 2.051462812e+01, 2.051460760e+01, 2.051458709e+01,
	                       1.873817423e+01, 1.787059273e+01, 1.787057486e+01, 1.787055699e+01,
	                       1.787052264e+01, 1.787050477e+01, 1.787048690e+01, 1.540883959e+01,
	                       1.540882418e+01, 1.540880877e+01, 1.540878748e+01, 1.540877207e+01,
	                       1.540875666e+01, 1.519911083e+01, 1.312941402e+01, 1.312940089e+01,
	                       1.312938776e+01, 1.312937618e+01, 1.312936305e+01, 1.312934992e+01,
	                       1.232846739e+01, 1.103235351e+01, 1.103234248e+01, 1.103233144e+01,
	                       1.103232680e+01, 1.103231576e+01, 1.103230473e+01, 1.000000000e+01,
	                       9.117648988e+00, 9.117639870e+00, 9.117630752e+00, 9.117630742e+00,
	                       9.117621625e+00, 9.117612507e+00, 8.111308308e+00, 7.385290064e+00,
	                       7.385282679e+00, 7.385278093e+00, 7.385275293e+00, 7.385270708e+00,
	                       7.385263323e+00, 6.579332247e+00, 5.835289514e+00, 5.835283678e+00,
	                       5.835282040e+00, 5.835277843e+00, 5.835276205e+00, 5.835270370e+00,
	                       5.336699231e+00, 4.467641612e+00, 4.467637231e+00, 4.467637144e+00,
	                       4.467632763e+00, 4.467632676e+00, 4.467628296e+00, 4.328761281e+00,
	                       4.060969516e+00, 4.059588698e+00, 4.058349003e+00, 4.057245075e+00,
	                       4.056271396e+00, 4.055422258e+00, 4.054691728e+00, 4.054073606e+00,
	                       4.053561371e+00, 4.053148106e+00, 4.052826405e+00, 4.052588235e+00,
	                       4.052424717e+00, 4.052325769e+00, 4.052279375e+00, 4.052269413e+00,
	                       4.052259450e+00, 4.052213058e+00, 4.052114120e+00, 4.051950640e+00,
	                       4.051712573e+00, 4.051391101e+00, 4.050978278e+00, 4.050466824e+00,
	                       4.049849990e+00, 4.049121466e+00, 4.048275318e+00, 4.047305939e+00,
	                       4.046208010e+00, 4.044976473e+00, 4.043606507e+00, 3.511191734e+00,
	                       3.282347593e+00, 3.282345228e+00, 3.282344310e+00, 3.282341946e+00,
	                       3.282341028e+00, 3.282338663e+00, 2.848035868e+00, 2.310129700e+00,
	                       2.279405975e+00, 2.279404835e+00, 2.279403696e+00, 2.279402555e+00,
	                       2.279401416e+00, 2.279400276e+00, 1.879636482e+00, 1.878997359e+00,
	                       1.878423557e+00, 1.877912596e+00, 1.877461921e+00, 1.877068891e+00,
	                       1.876730760e+00, 1.876444658e+00, 1.876207566e+00, 1.876016283e+00,
	                       1.875867381e+00, 1.875757143e+00, 1.875681457e+00, 1.875635658e+00,
	                       1.875614184e+00, 1.875609573e+00, 1.875604962e+00, 1.875583489e+00,
	                       1.875537695e+00, 1.875462027e+00, 1.875351836e+00, 1.875203040e+00,
	                       1.875011962e+00, 1.874775231e+00, 1.874489725e+00, 1.874152522e+00,
	                       1.873817423e+00, 1.873760877e+00, 1.873312192e+00, 1.872804007e+00,
	                       1.872233981e+00, 1.871599882e+00, 1.519911083e+00, 1.458818175e+00,
	                       1.458817708e+00, 1.458816716e+00, 1.458816249e+00, 1.458815257e+00,
	                       1.458814790e+00, 1.284910363e+00, 1.284473469e+00, 1.284081228e+00,
	                       1.283731943e+00, 1.283423870e+00, 1.283155201e+00, 1.282924060e+00,
	                       1.282728485e+00, 1.282566413e+00, 1.282435655e+00, 1.282333869e+00,
	                       1.282258511e+00, 1.282206774e+00, 1.282175467e+00, 1.282160788e+00,
	                       1.282157635e+00, 1.282154483e+00, 1.282139805e+00, 1.282108500e+00,
	                       1.282056775e+00, 1.281981450e+00, 1.281879736e+00, 1.281749118e+00,
	                       1.281587293e+00, 1.281392126e+00, 1.281161620e+00, 1.280893897e+00,
	                       1.280587184e+00, 1.280239798e+00, 1.279850137e+00, 1.279416678e+00,
	                       1.232846739e+00, 1.000000000e+00, 8.205834991e-01, 8.205833513e-01,
	                       8.205826785e-01, 8.205825307e-01, 8.205818580e-01, 8.205817102e-01,
	                       8.111308308e-01, 6.579332247e-01, 6.578638232e-01, 6.578623247e-01,
	                       6.576401361e-01, 6.576386341e-01, 6.574393105e-01, 6.574378054e-01,
	                       6.572604786e-01, 6.572589706e-01, 6.571027465e-01, 6.571012361e-01,
	                       6.569651895e-01, 6.569636769e-01, 6.568468466e-01, 6.568453321e-01,
	                       6.567467134e-01, 6.567451974e-01, 6.566637332e-01, 6.566622159e-01,
	                       6.565967860e-01, 6.565952676e-01, 6.565446718e-01, 6.565431526e-01,
	                       6.565060892e-01, 6.565045694e-01, 6.564796000e-01, 6.564780798e-01,
	                       6.564635708e-01, 6.564620503e-01, 6.564560551e-01, 6.564545345e-01,
	                       6.564544412e-01, 6.564529206e-01, 6.564528273e-01, 6.564513067e-01,
	                       6.564453119e-01, 6.564437912e-01, 6.564292844e-01, 6.564277634e-01,
	                       6.564028014e-01, 6.564012800e-01, 6.563642354e-01, 6.563627134e-01,
	                       6.563121582e-01, 6.563106354e-01, 6.562452826e-01, 6.562437587e-01,
	                       6.561624291e-01, 6.561609039e-01, 6.560625044e-01, 6.560609777e-01,
	                       6.559444865e-01, 6.559429579e-01, 6.558074139e-01, 6.558058832e-01,
	                       6.556503784e-01, 6.556488452e-01, 6.554725182e-01, 6.554709823e-01,
	                       6.552730141e-01, 6.552714751e-01, 6.550510851e-01, 6.550495427e-01,
	                       5.336699231e-01, 4.873082423e-01, 4.873074088e-01, 4.871425489e-01,
	                       4.871417153e-01, 4.869937898e-01, 4.869929561e-01, 4.868613223e-01,
	                       4.868604884e-01, 4.867444841e-01, 4.867436502e-01, 4.866425905e-01,
	                       4.866417565e-01, 4.865549295e-01, 4.865540954e-01, 4.864807570e-01,
	                       4.864799228e-01, 4.864192905e-01, 4.864184563e-01, 4.863697001e-01,
	                       4.863688659e-01, 4.863310972e-01, 4.863302629e-01, 4.863025176e-01,
	                       4.863016833e-01, 4.862828961e-01, 4.862820617e-01, 4.862710226e-01,
	                       4.862701883e-01, 4.862654555e-01, 4.862646211e-01, 4.862642600e-01,
	                       4.862634257e-01, 4.862630646e-01, 4.862622302e-01, 4.862574976e-01,
	                       4.862566632e-01, 4.862456254e-01, 4.862447911e-01, 4.862260084e-01,
	                       4.862251741e-01, 4.861974412e-01, 4.861966068e-01, 4.861588656e-01,
	                       4.861580312e-01, 4.861093283e-01, 4.861084939e-01, 4.860479556e-01,
	                       4.860471211e-01, 4.859739377e-01, 4.859731031e-01, 4.858865173e-01,
	                       4.858856827e-01, 4.857849825e-01, 4.857841478e-01, 4.856686604e-01,
	                       4.856678256e-01, 4.855369127e-01, 4.855360777e-01, 4.853891325e-01,
	                       4.853882974e-01, 4.852247413e-01, 4.852239061e-01, 4.350974176e-01,
	                       4.350967517e-01, 4.349494770e-01, 4.349488112e-01, 4.348166562e-01,
	                       4.348159906e-01, 4.346983816e-01, 4.346977160e-01, 4.345940617e-01,
	                       4.345933962e-01, 4.345030852e-01, 4.345024198e-01, 4.344248163e-01,
	                       4.344241510e-01, 4.343585909e-01, 4.343579256e-01, 4.343037100e-01,
	                       4.343030448e-01, 4.342594329e-01, 4.342587676e-01, 4.342249659e-01,
	                       4.342243008e-01, 4.341994484e-01, 4.341987833e-01, 4.341819291e-01,
	                       4.341812640e-01, 4.341713279e-01, 4.341706627e-01, 4.341663572e-01,
	                       4.341656921e-01, 4.341652898e-01, 4.341646247e-01, 4.341642225e-01,
	                       4.341635573e-01, 4.341592519e-01, 4.341585868e-01, 4.341486518e-01,
	                       4.341479866e-01, 4.341311366e-01, 4.341304715e-01, 4.341056301e-01,
	                       4.341049650e-01, 4.340711876e-01, 4.340705225e-01, 4.340269578e-01,
	                       4.340262928e-01, 4.339721607e-01, 4.339714958e-01, 4.339060732e-01,
	                       4.339054083e-01, 4.338280193e-01, 4.338273544e-01, 4.337373631e-01,
	                       4.337366984e-01, 4.336335040e-01, 4.336328393e-01, 4.335158720e-01,
	                       4.335152074e-01, 4.333839253e-01, 4.333832608e-01, 4.332371473e-01,
	                       4.332364830e-01, 4.328761281e-01, 3.647021645e-01, 3.647017998e-01,
	                       3.647014351e-01, 3.511191734e-01, 2.848035868e-01, 2.310129700e-01,
	                       1.873817423e-01, 1.519911083e-01, 1.232846739e-01, 1.218283872e-01,
	                       1.218283102e-01, 1.217869595e-01, 1.217868865e-01, 1.217497659e-01,
	                       1.217496964e-01, 1.217166455e-01, 1.217165792e-01, 1.216874330e-01,
	                       1.216873694e-01, 1.216619569e-01, 1.216618958e-01, 1.216400394e-01,
	                       1.216399803e-01, 1.216214943e-01, 1.216214370e-01, 1.216061261e-01,
	                       1.216060703e-01, 1.215937272e-01, 1.215936726e-01, 1.215840755e-01,
	                       1.215840218e-01, 1.215769299e-01, 1.215768768e-01, 1.215720240e-01,
	                       1.215719714e-01, 1.215690553e-01, 1.215690030e-01, 1.215676634e-01,
	                       1.215676112e-01, 1.215673645e-01, 1.215673123e-01, 1.215670656e-01,
	                       1.215670134e-01, 1.215656737e-01, 1.215656217e-01, 1.215627053e-01,
	                       1.215626536e-01, 1.215578006e-01, 1.215577493e-01, 1.215506580e-01,
	                       1.215506075e-01, 1.215410131e-01, 1.215409635e-01, 1.215286275e-01,
	                       1.215285790e-01, 1.215132828e-01, 1.215132357e-01, 1.214947763e-01,
	                       1.214947311e-01, 1.214729190e-01, 1.214728758e-01, 1.214475327e-01,
	                       1.214474919e-01, 1.214184491e-01, 1.214184111e-01, 1.213855088e-01,
	                       1.213854738e-01, 1.213485599e-01, 1.213485285e-01, 1.213074579e-01,
	                       1.213074303e-01, 1.027924170e-01, 1.027574656e-01, 1.027260863e-01,
	                       1.026981435e-01, 1.026734976e-01, 1.026520041e-01, 1.026335129e-01,
	                       1.026178669e-01, 1.026049011e-01, 1.025944405e-01, 1.025862976e-01,
	                       1.025802690e-01, 1.025761300e-01, 1.025736254e-01, 1.025724511e-01,
	                       1.025721989e-01, 1.025719468e-01, 1.025707725e-01, 1.025682681e-01,
	                       1.025641301e-01, 1.025581041e-01, 1.025499670e-01, 1.025395176e-01,
	                       1.025265716e-01, 1.025109582e-01, 1.024925177e-01, 1.024710999e-01,
	                       1.024465629e-01, 1.024187720e-01, 1.023875991e-01, 1.023529224e-01,
	                       1.000000000e-01, 9.746244851e-02, 9.742930954e-02, 9.739955747e-02,
	                       9.737306374e-02, 9.734969592e-02, 9.732931702e-02, 9.731178466e-02,
	                       9.729695004e-02, 9.728465664e-02, 9.727473848e-02, 9.726701783e-02,
	                       9.726130186e-02, 9.725737752e-02, 9.725500281e-02, 9.725388937e-02,
	                       9.725365028e-02, 9.725341119e-02, 9.725229778e-02, 9.724992333e-02,
	                       9.724599990e-02, 9.724028640e-02, 9.723257122e-02, 9.722266368e-02,
	                       9.721038904e-02, 9.719558532e-02, 9.717810110e-02, 9.715779397e-02,
	                       9.713452934e-02, 9.710817958e-02, 9.707862328e-02, 9.704574478e-02,
	                       9.517819086e-02, 9.514582862e-02, 9.511677389e-02, 9.509090113e-02,
	                       9.506808101e-02, 9.504817975e-02, 9.503105833e-02, 9.501657141e-02,
	                       9.500456614e-02, 9.499488045e-02, 9.498734076e-02, 9.498175876e-02,
	                       9.497792640e-02, 9.497560735e-02, 9.497452001e-02, 9.497428652e-02,
	                       9.497405303e-02, 9.497296572e-02, 9.497064692e-02, 9.496681545e-02,
	                       9.496123587e-02, 9.495370152e-02, 9.494402619e-02, 9.493203925e-02,
	                       9.491758250e-02, 9.490050809e-02, 9.488067692e-02, 9.485795758e-02,
	                       9.483222541e-02, 9.480336187e-02, 9.477125398e-02, 9.112679619e-02,
	                       9.112670507e-02, 9.112661394e-02, 8.111308308e-02, 6.579332247e-02,
	                       5.336699231e-02, 4.328761281e-02, 3.511191734e-02, 2.848035868e-02,
	                       2.310129700e-02, 1.873817423e-02, 1.519911083e-02, 1.232846739e-02,
	                       1.000000000e-02});

	frequencyv = Constant::LIGHT / rwavelengthv / Constant::UM_CM;
#endif
#ifndef PROBLEMATIC_ISRF
	Array specificIntensityv = generateSpecificIntensityv(
	                vector<double>(begin(frequencyv), end(frequencyv)), Tc, G0);
#else
	Array specificIntensityv(
	                {2.209037881355437e-18, 3.357541088148053e-18, 5.103163779085309e-18,
	                 7.756354940713623e-18, 1.178896937471095e-17, 1.791818434401347e-17,
	                 2.723404535179999e-17, 4.139332431096937e-17, 6.291416666422698e-17,
	                 9.562392851082393e-17, 1.453398488302005e-16, 2.209036093554912e-16,
	                 3.357537738136537e-16, 5.103157501775958e-16, 7.756343178183364e-16,
	                 1.178894733387998e-15, 1.791814304352771e-15, 2.72339679622471e-15,
	                 4.139317929711596e-15, 6.291389493483229e-15, 9.562341933975845e-15,
	                 1.453388947370676e-14, 2.20901821560271e-14,  3.357504238143937e-14,
	                 5.103094728965583e-14, 7.756225553534823e-14, 1.178872692708128e-13,
	                 1.791773004216064e-13, 2.723319407478174e-13, 4.13917291772097e-13,
	                 6.291117768391817e-13, 9.561832772851443e-13, 1.453293540353906e-12,
	                 2.208839441385948e-12, 3.357169250473768e-12, 5.1024670291744e-12,
	                 7.755049372455103e-12, 1.178652301018993e-11, 1.791360037754046e-11,
	                 2.722545600648052e-11, 4.137722984092533e-11, 6.288400947803657e-11,
	                 9.556742155716215e-11, 1.452339699838217e-10, 2.207052229744257e-10,
	                 3.353820599355733e-10, 5.096192862519628e-10, 7.743294102228495e-10,
	                 1.176449895084104e-9,  1.787233863638684e-9,  2.714815595863611e-9,
	                 4.123242275570543e-9,  6.261275774443785e-9,  9.505935394981547e-9,
	                 1.442824259792158e-8,  2.189233165602186e-8,  3.320456645426061e-8,
	                 5.033734317764478e-8,  7.626395443276986e-8,  1.15457692655693e-7,
	                 1.620203657100815e-7,  1.620206857199589e-7,  1.620210057307844e-7,
	                 1.74632115602722e-7,   1.983823283407389e-7,  1.983827195802786e-7,
	                 1.983831109398579e-7,  1.983851550159683e-7,  1.983855462638692e-7,
	                 1.983859376318121e-7,  2.455038470355774e-7,  2.45504330474472e-7,
	                 2.455048139147944e-7,  2.455069815583021e-7,  2.455074650064542e-7,
	                 2.45507948456034e-7,   2.638321840223223e-7,  3.074210391958456e-7,
	                 3.074216434260988e-7,  3.074222476581331e-7,  3.074245336663361e-7,
	                 3.0742513790689e-7,    3.07425742149225e-7,   3.900463194971913e-7,
	                 3.900470843303461e-7,  3.900478491657503e-7,  3.90050237734326e-7,
	                 3.900510025790031e-7,  3.900517674259294e-7,  3.980297757774028e-7,
	                 5.022225452861208e-7,  5.022235276495259e-7,  5.022245095370759e-7,
	                 5.022269673803565e-7,  5.022279497567327e-7,  5.022289316572473e-7,
	                 5.994326559889264e-7,  6.574892206837731e-7,  6.574905019823598e-7,
	                 6.574917832846908e-7,  6.574942462350534e-7,  6.574955275483253e-7,
	                 6.574968088653411e-7,  8.77146444647329e-7,   8.771481468864517e-7,
	                 8.771498491305263e-7,  8.771522009087163e-7,  8.771539031645861e-7,
	                 8.77155605425409e-7,   9.007806275529627e-7,  1.195716255504954e-6,
	                 1.195718563279928e-6,  1.195720871061577e-6,  1.195722906414529e-6,
	                 1.195725214208743e-6,  1.195727522009635e-6,  1.349965466838108e-6,
	                 1.671041335814928e-6,  1.671044537315249e-6,  1.671047741727312e-6,
	                 1.671049088511942e-6,  1.671052292937082e-6,  1.671055494468859e-6,
	                 2.016344579879779e-6,  2.403814644547693e-6,  2.403819207491978e-6,
	                 2.403823770449231e-6,  2.40382377545358e-6,   2.403828337923385e-6,
	                 2.403832900906597e-6,  2.999061698950898e-6,  3.576972918841828e-6,
	                 3.576979619340896e-6,  3.57698378028315e-6,   3.576986320766061e-6,
	                 3.576990480812662e-6,  3.576997181360956e-6,  4.437421986025446e-6,
	                 5.539043112364819e-6,  5.539053294344145e-6,  5.539056152142541e-6,
	                 5.539063474606732e-6,  5.539066332412975e-6,  5.539076512711358e-6,
	                 6.522676153877656e-6,  8.988855558998812e-6,  8.988871295206109e-6,
	                 8.988871607703678e-6,  8.988887343952796e-6,  8.988887656451197e-6,
	                 8.98890338915019e-6,   9.509082772171814e-6,  1.064713995953206e-5,
	                 1.065352269343368e-5,  1.065925794030778e-5,  1.066436894516017e-5,
	                 1.066887994102967e-5,  1.067281626049973e-5,  1.067620447985208e-5,
	                 1.067907259587591e-5,  1.068145025852721e-5,  1.068336910124032e-5,
	                 1.068486315498842e-5,  1.068596947146158e-5,  1.068672912264985e-5,
	                 1.068718884168298e-5,  1.068740440143049e-5,  1.06874506885643e-5,
	                 1.068749698064236e-5,  1.068771254033018e-5,  1.068817227574503e-5,
	                 1.068893198298928e-5,  1.069003844665982e-5,  1.069153282167152e-5,
	                 1.06934523005373e-5,   1.069583108829241e-5,  1.069870104748542e-5,
	                 1.070209214332183e-5,  1.070603275396476e-5,  1.071054991570584e-5,
	                 1.071566952159984e-5,  1.07214164641804e-5,   1.072781476414234e-5,
	                 1.371929096612115e-5,  1.539696598321603e-5,  1.539698485545551e-5,
	                 1.539699218092595e-5,  1.539701104523299e-5,  1.539701837072182e-5,
	                 1.539703724305608e-5,  1.953424360222953e-5,  2.73505089121107e-5,
	                 2.792682080261913e-5,  2.792684250949512e-5,  2.792686419735422e-5,
	                 2.792688592331989e-5,  2.792690761122749e-5,  2.79269293182005e-5,
	                 3.73115224631549e-5,   3.732987947911772e-5,  3.734637104297664e-5,
	                 3.736106503818257e-5,  3.737403203313734e-5,  3.738534555674666e-5,
	                 3.739508260477113e-5,  3.74033241468629e-5,   3.741015580687956e-5,
	                 3.741566877416205e-5,  3.741996106108954e-5,  3.742313925106341e-5,
	                 3.74253215153975e-5,   3.742664212993206e-5,  3.742726135522049e-5,
	                 3.742739432009529e-5,  3.742752728562727e-5,  3.742814650245272e-5,
	                 3.742946711147854e-5,  3.743164937005015e-5,  3.743482758552801e-5,
	                 3.743911987254052e-5,  3.744463286373097e-5,  3.745146460374118e-5,
	                 3.745970623177282e-5,  3.746944343352746e-5,  3.747912336745368e-5,
	                 3.74807571427782e-5,   3.749372444506133e-5,  3.750841887473187e-5,
	                 3.752491100070144e-5,  3.754326875199545e-5,  4.995455017988481e-5,
	                 5.264208620909638e-5,  5.26421074429541e-5,   5.264215254788662e-5,
	                 5.264217378177788e-5,  5.264221888678167e-5,  5.264224012070648e-5,
	                 6.132386200936095e-5,  6.134767907921454e-5,  6.136907060740876e-5,
	                 6.138812638225425e-5,  6.140493918824083e-5,  6.141960569933035e-5,
	                 6.14322266637106e-5,   6.144290785326472e-5,  6.145176084999964e-5,
	                 6.145890437915707e-5,  6.14644657521026e-5,   6.146858351160481e-5,
	                 6.147141073327836e-5,  6.147312160605755e-5,  6.147392380577358e-5,
	                 6.147409611708699e-5,  6.14742683742817e-5,   6.147507053581653e-5,
	                 6.147678141139351e-5,  6.14796083921816e-5,   6.148372546442238e-5,
	                 6.148928537346099e-5,  6.149642604946087e-5,  6.150527402713447e-5,
	                 6.151594688161475e-5,  6.152855489902209e-5,  6.154320214547647e-5,
	                 6.155998726238691e-5,  6.15790043162674e-5,   6.160034332008107e-5,
	                 6.162409037074938e-5,  6.423376569599712e-5,  7.882086286390695e-5,
	                 9.043769597572918e-5,  9.043770465188077e-5,  9.043774414653195e-5,
	                 9.043775282266773e-5,  9.043779231137676e-5,  9.043780098749671e-5,
	                 9.098656326050973e-5,  9.69603329723841e-5,   9.696111399295816e-5,
	                 9.696113082935486e-5,  9.696361449369536e-5,  9.696363119718322e-5,
	                 9.696583756840339e-5,  9.69658541511875e-5,   9.69677997406379e-5,
	                 9.696781621674062e-5,  9.696951674973034e-5,  9.696953312944105e-5,
	                 9.697100368290179e-5,  9.697101997927445e-5,  9.697227511538633e-5,
	                 9.697229133980811e-5,  9.697334526714979e-5,  9.697336142930395e-5,
	                 9.6974228178204e-5,    9.697424428920305e-5,  9.697493790570996e-5,
	                 9.697495397587097e-5,  9.697548878097351e-5,  9.697550481868088e-5,
	                 9.697589571546557e-5,  9.697591172919016e-5,  9.697617465403982e-5,
	                 9.697619065115465e-5,  9.697634326969941e-5,  9.697635925736545e-5,
	                 9.69764222836969e-5,   9.697643826650301e-5,  9.697643924712687e-5,
	                 9.697645522866355e-5,  9.697645620920958e-5,  9.697647218947681e-5,
	                 9.69765351782887e-5,   9.697655115369488e-5,  9.697670349180748e-5,
	                 9.697671945775383e-5,  9.697698131300566e-5,  9.697699726230368e-5,
	                 9.697738524242397e-5,  9.697740116763447e-5,  9.697792946267871e-5,
	                 9.697794535520531e-5,  9.697862627051451e-5,  9.697864212174071e-5,
	                 9.697948634621616e-5,  9.697950214548408e-5,  9.698051889913491e-5,
	                 9.698053463484106e-5,  9.698173174398017e-5,  9.698174740566012e-5,
	                 9.698313133414351e-5,  9.69831469083707e-5,   9.698472275767294e-5,
	                 9.698473823216642e-5,  9.698650972989612e-5,  9.698652508945683e-5,
	                 9.698849455437006e-5,  9.698850978491498e-5,  9.69906780898728e-5,
	                 9.699069317540865e-5,  9.309174835374211e-5,  8.78727109112336e-5,
	                 8.787259291324177e-5,  8.784923563716968e-5,  8.78491174411574e-5,
	                 8.782812845436124e-5,  8.782801007898162e-5,  8.780930804373584e-5,
	                 8.78091894927492e-5,   8.779268876340814e-5,  8.779257008252074e-5,
	                 8.777818037018442e-5,  8.777806156172025e-5,  8.776568744045422e-5,
	                 8.776556852018592e-5,  8.77551088032398e-5,   8.775498978613253e-5,
	                 8.77463367579832e-5,   8.774621767242369e-5,  8.773925590557617e-5,
	                 8.773913676477893e-5,  8.773374164952331e-5,  8.773362245143299e-5,
	                 8.772965789602932e-5,  8.772953866609183e-5,  8.772685353833507e-5,
	                 8.772673427223714e-5,  8.772515629593009e-5,  8.772503703089282e-5,
	                 8.772436044902653e-5,  8.772424116348849e-5,  8.772418954046795e-5,
	                 8.772407026789353e-5,  8.772401864429627e-5,  8.772389935609319e-5,
	                 8.772322275250511e-5,  8.772310345809647e-5,  8.772152529311385e-5,
	                 8.772140599976965e-5,  8.771872008768877e-5,  8.77186007724782e-5,
	                 8.771463409576458e-5,  8.771451473440323e-5,  8.77091148630293e-5,
	                 8.77089954586549e-5,   8.77020243601943e-5,   8.770190490057516e-5,
	                 8.769323525251784e-5,  8.769311571011592e-5,  8.768262854235097e-5,
	                 8.768250890302102e-5,  8.76700918268425e-5,   8.766997208992357e-5,
	                 8.765551817159258e-5,  8.765539830692902e-5,  8.763880508486309e-5,
	                 8.763868507585882e-5,  8.761985377891955e-5,  8.761973359384426e-5,
	                 8.759856860444463e-5,  8.75984482396248e-5,   8.757485651455939e-5,
	                 8.757473595126224e-5,  7.856183977726873e-5,  7.856169539566092e-5,
	                 7.852974641280548e-5,  7.852960190257058e-5,  7.850090459345972e-5,
	                 7.850075999170386e-5,  7.847519879221176e-5,  7.847505407028407e-5,
	                 7.845250818073527e-5,  7.84523633745587e-5,   7.843270632728171e-5,
	                 7.843256145043248e-5,  7.841566028362956e-5,  7.841551534903618e-5,
	                 7.840122986565071e-5,  7.840108486376983e-5,  7.838926632232098e-5,
	                 7.83891212864785e-5,   7.837961095932126e-5,  7.837946585668209e-5,
	                 7.837209278011202e-5,  7.83719476860777e-5,   7.836652555839806e-5,
	                 7.836638043843926e-5,  7.836270274966298e-5,  7.836255761190499e-5,
	                 7.836038928114724e-5,  7.836024411079481e-5,  7.835930448087035e-5,
	                 7.835915932729134e-5,  7.835907152770782e-5,  7.835892637304437e-5,
	                 7.835883859462947e-5,  7.835869341705691e-5,  7.835775376222493e-5,
	                 7.835760860142686e-5,  7.835544016656229e-5,  7.835529497316719e-5,
	                 7.835161689339957e-5,  7.835147170403551e-5,  7.834604841585929e-5,
	                 7.834590320057898e-5,  7.833852748916542e-5,  7.833838223888804e-5,
	                 7.832886673184055e-5,  7.83287214584648e-5,   7.831689369930904e-5,
	                 7.831674839211049e-5,  7.830244763855442e-5,  7.83023022642126e-5,
	                 7.828537724744646e-5,  7.828523179379724e-5,  7.826553904607146e-5,
	                 7.826539354408084e-5,  7.824279622961233e-5,  7.824265062210398e-5,
	                 7.82170175436355e-5,   7.82168718385251e-5,   7.818807666375056e-5,
	                 7.818793084651402e-5,  7.815585144505301e-5,  7.815570552260796e-5,
	                 7.807644922646766e-5,  5.953639251186559e-5,  5.953627539310653e-5,
	                 5.95361582741757e-5,   5.506002054050181e-5,  3.117338328659792e-5,
	                 1.340693409075852e-5,  4.098636445946744e-6,  8.217917971109998e-7,
	                 9.792904606187364e-8,  8.524358098873693e-8,  8.524294727038132e-8,
	                 8.490317621194258e-8,  8.490257735399527e-8,  8.45984992844283e-8,
	                 8.45979307933417e-8,   8.432793316829325e-8,  8.432739225499195e-8,
	                 8.408987243323094e-8,  8.40893547327438e-8,   8.388270453030445e-8,
	                 8.388220817066536e-8,  8.37048050930782e-8,   8.370432580443343e-8,
	                 8.35545170881972e-8,   8.3554053071997e-8,    8.343013984560354e-8,
	                 8.342968852047718e-8,  8.332990278665336e-8,  8.332946159659987e-8,
	                 8.3251942497662e-8,    8.325150890832781e-8,  8.319426290264309e-8,
	                 8.31938343981489e-8,   8.315468098085519e-8,  8.315425667459003e-8,
	                 8.313073622974766e-8,  8.313031444173982e-8,  8.311951145208416e-8,
	                 8.311909051653157e-8,  8.311710117586149e-8,  8.311668025018199e-8,
	                 8.311469095617204e-8,  8.31142700403657e-8,   8.310346793096871e-8,
	                 8.310304867366045e-8,  8.307953752734143e-8,  8.307912078591232e-8,
	                 8.304000943294942e-8,  8.303959607496869e-8,  8.298247280173726e-8,
	                 8.298206611794432e-8,  8.290483027361207e-8,  8.290443113997576e-8,
	                 8.280521099851039e-8,  8.280482109601508e-8,  8.268192555174896e-8,
	                 8.268154736026811e-8,  8.253343452441198e-8,  8.253307211643554e-8,
	                 8.23583355635674e-8,   8.235798978595527e-8,  8.215534314861995e-8,
	                 8.215501723224094e-8,  8.192328435755353e-8,  8.192298150191791e-8,
	                 8.166109372717481e-8,  8.166081550381334e-8,  8.136780484640205e-8,
	                 8.136755596602307e-8,  8.10425521981185e-8,   8.104233414502742e-8,
	                 9.220267742707856e-9,  9.174916173496618e-9,  9.134360879233886e-9,
	                 9.098375031191453e-9,  9.066734906431727e-9,  9.039218010942004e-9,
	                 9.015601492305589e-9,  8.995659684802272e-9,  8.97916231786734e-9,
	                 8.965871214893057e-9,  8.955536505100697e-9,  8.947891708395642e-9,
	                 8.942646296424662e-9,  8.939473448989403e-9,  8.937986165116565e-9,
	                 8.937666774124975e-9,  8.937347519450092e-9,  8.935860535587029e-9,
	                 8.932689983565735e-9,  8.927453396707729e-9,  8.919832226667707e-9,
	                 8.909549875334977e-9,  8.896360360173722e-9,  8.880042543282725e-9,
	                 8.860396377033858e-9,  8.837240404761499e-9,  8.810410259054066e-9,
	                 8.779757648738779e-9,  8.745149455921828e-9,  8.706467439254882e-9,
	                 8.663608283138315e-9,  6.143919497553447e-9,  4.155025075574753e-9,
	                 4.133242545291501e-9,  4.113769803072592e-9,  4.096495963345299e-9,
	                 4.081311908801378e-9,  4.068109463968101e-9,  4.056780495430265e-9,
	                 4.047215898053514e-9,  4.039304420450105e-9,  4.032931218854792e-9,
	                 4.027976067574809e-9,  4.024310897439818e-9,  4.021796206478335e-9,
	                 4.020275163279423e-9,  4.019562155590341e-9,  4.019409064948242e-9,
	                 4.019255979311253e-9,  4.018543145993809e-9,  4.017023325380052e-9,
	                 4.014513126184063e-9,  4.010860053613542e-9,  4.005931684203852e-9,
	                 3.999610485098014e-9,  3.991790908723423e-9,  3.982377641013723e-9,
	                 3.971284470519541e-9,  3.958433565468593e-9,  3.943754972013237e-9,
	                 3.927186312297953e-9,  3.908672547485604e-9,  3.888165897915331e-9,
	                 2.865090549919881e-9,  2.849641177361069e-9,  2.835832029930983e-9,
	                 2.823583826653599e-9,  2.812818643200071e-9,  2.803459321865784e-9,
	                 2.795428833331032e-9,  2.788649513901513e-9,  2.783042261510019e-9,
	                 2.77852549719563e-9,   2.775013863744239e-9,  2.772416497501424e-9,
	                 2.770634472528308e-9,  2.769556607810951e-9,  2.769051350697333e-9,
	                 2.768942864661758e-9,  2.76883438229287e-9,   2.768329252784286e-9,
	                 2.767252277888036e-9,  2.765473530084431e-9,  2.762884991873195e-9,
	                 2.759392893148071e-9,  2.754914055997626e-9,  2.749373844015589e-9,
	                 2.742704906843744e-9,  2.734846416603132e-9,  2.725743521655071e-9,
	                 2.715347043459921e-9,  2.703613221582558e-9,  2.690503592585387e-9,
	                 2.675984891226422e-9,  1.4091818521354e-9,    1.409158270110462e-9,
	                 1.409134685840814e-9,  1.74777609134614e-10,  1.875213596549911e-12,
	                 6.046937840330138e-15, 4.429711182252813e-18, 5.220352809884455e-22,
	                 6.467573128248577e-27, 4.985513558812729e-33, 1.252493150769883e-40,
	                 4.620800053595793e-50, 9.369112946030021e-62, 3.108099322643046e-76});
#endif

	GasState gs;
	gi.updateGasState(gs, n, expectedTemperature, specificIntensityv);

	const Array& emv = gs._emissivityv;
	const Array& opv = gs._opacityv;
	const Array& scav = gs._scatteringOpacityv * gs._previousISRFv;

	cout << "Integrated emissivity " << TemplatedUtils::integrate<double>(frequencyv, emv)
	     << endl;

	ofstream out, wavfile;
	char tab = '\t';
	out.open("opticalProperties.dat");
	vector<std::string> colnames = {"frequency",
	                                "wavelength",
	                                "intensity j_nu (erg s-1 cm-3 Hz-1 sr-1)",
	                                "opacity alpha_nu (cm-1)",
	                                "scattered (erg s-1 cm-3 Hz-1 sr-1)",
	                                "int - sca"};
	out << "#";
	int i = 0;
	for (const auto& s : colnames)
	{
		out << i << ":" << s << tab;
		i++;
	}
	out << endl;
	wavfile.open("wavelengths.dat");
	wavfile << "#wav (micron)" << tab << "freq (Hz)" << endl;
	for (size_t iFreq = 0; iFreq < emv.size(); iFreq++)
	{
		double freq = frequencyv[iFreq];
		double wav = Constant::LIGHT / freq * Constant::CM_UM;
		out.precision(9);
		double effective = emv[iFreq] - scav[iFreq];
		effective = effective > 0 ? effective : 0;
		out << scientific << freq << tab << wav << tab << emv[iFreq] << tab << opv[iFreq]
		    << tab << scav[iFreq] << tab << emv[iFreq] - scav[iFreq] << tab << effective
		    << endl;
		wavfile.precision(9);
		wavfile << wav << tab << freq << endl;
	}
	out.close();
	wavfile.close();

	// Print some line intensities relative to Hbeta

	double fHalpha = Constant::LIGHT / 656.453e-7;
	double fHbeta = Constant::LIGHT / 486.264e-7;
	double fHgamma = Constant::LIGHT / 434.165e-7;

	double fLya = Constant::LIGHT / 121.567e-7;

	double fPalpha = Constant::LIGHT / 1875.61e-7;
	double fPbeta = Constant::LIGHT / 1282.16e-7;

	double fBralpha = Constant::LIGHT / 4052.27e-7;

	function<double(double frequency)> evaluateSpectrum = [&](double f) {
		return TemplatedUtils::evaluateLinInterpf(f, frequencyv, emv);
	};

	double Hbeta = evaluateSpectrum(fHbeta);
	cout << "Halpha / Hbeta " << evaluateSpectrum(fHalpha) / Hbeta << endl;
	cout << "Hgamma / Hbeta " << evaluateSpectrum(fHgamma) / Hbeta << endl;

	cout << "Lyalpha / Hbeta " << evaluateSpectrum(fLya) / Hbeta << endl;

	cout << "Palpha / Hbeta " << evaluateSpectrum(fPalpha) / Hbeta << endl;
	cout << "Pbeta / Hbeta " << evaluateSpectrum(fPbeta) / Hbeta << endl;

	cout << "Bralpha / HBeta " << evaluateSpectrum(fBralpha) / Hbeta << endl;

	cout << "TestHydrogenCalculator done" << endl;

//	cout << "----------------------------------" << endl;
//	cout << "plotting heating curve..." << endl;
//	gi.testHeatingCurve(n, specificIntensityv);
}

void Testing::testPhotoelectricHeating()
{
	PhotoelectricHeatingRecipe phr;
	double T = 1000;
	vector<double> G0values;
	if (T == 1000)
	{
		G0values = {2.45e-2, 2.45e-1, 2.45e0, 2.45e1, 2.45e2};
	}
	if (T == 100)
	{
		G0values = {.75e-1, .75e0, .75e1, .75e2, .75e3};
	}

	phr.setGasTemperature(T);
	for (double G0 : G0values)
	{
		phr.setG0(G0);
		stringstream filename;
		filename << "/Users/drvdputt/GasModule/run/photoelectricHeatingG" << setprecision(4)
		         << scientific << G0 << ".dat";
		phr.heatingRateTest(filename.str());
	}
}
